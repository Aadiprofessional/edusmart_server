-- Payment Transactions Table for Antom Integration
-- This table stores all payment transactions processed through Antom

-- Drop table if exists (for development/testing)
-- DROP TABLE IF EXISTS payment_transactions CASCADE;

CREATE TABLE IF NOT EXISTS payment_transactions (
    id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    plan_id INTEGER REFERENCES subscription_plans(id) ON DELETE SET NULL,
    addon_id INTEGER REFERENCES addon_plans(id) ON DELETE SET NULL,
    
    -- Antom payment identifiers
    payment_request_id VARCHAR(255) NOT NULL UNIQUE,
    order_id VARCHAR(255) NOT NULL,
    payment_id VARCHAR(255), -- Antom's internal payment ID
    
    -- Payment details
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) NOT NULL DEFAULT 'USD',
    payment_method_type VARCHAR(50) NOT NULL DEFAULT 'CARD',
    
    -- Payment status
    status VARCHAR(50) NOT NULL DEFAULT 'pending', -- pending, processing, completed, failed, cancelled, unknown
    payment_status VARCHAR(50), -- Antom's payment status (SUCCESS, FAIL, PROCESSING, CANCELLED, PENDING)
    payment_result_code VARCHAR(100), -- Antom's result code
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    webhook_received_at TIMESTAMP WITH TIME ZONE,
    
    -- Additional data
    payment_data JSONB, -- Store full Antom response
    metadata JSONB -- Store additional metadata
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_payment_transactions_user_id ON payment_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_payment_request_id ON payment_transactions(payment_request_id);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_status ON payment_transactions(status);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_payment_status ON payment_transactions(payment_status);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_created_at ON payment_transactions(created_at);

-- Create triggers for updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_payment_transactions_updated_at ON payment_transactions;
CREATE TRIGGER update_payment_transactions_updated_at
    BEFORE UPDATE ON payment_transactions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Add comments for documentation
COMMENT ON TABLE payment_transactions IS 'Stores all payment transactions processed through Antom payment gateway';
COMMENT ON COLUMN payment_transactions.payment_request_id IS 'Unique payment request ID generated by our system for Antom';
COMMENT ON COLUMN payment_transactions.order_id IS 'Order ID for the payment transaction';
COMMENT ON COLUMN payment_transactions.payment_id IS 'Antom internal payment ID returned after payment creation';
COMMENT ON COLUMN payment_transactions.status IS 'Internal payment status (pending, processing, completed, failed, cancelled, unknown)';
COMMENT ON COLUMN payment_transactions.payment_status IS 'Antom payment status (SUCCESS, FAIL, PROCESSING, CANCELLED, PENDING)';
COMMENT ON COLUMN payment_transactions.payment_result_code IS 'Antom result code providing more details about the payment status';
COMMENT ON COLUMN payment_transactions.payment_data IS 'Full JSON response from Antom payment creation';
COMMENT ON COLUMN payment_transactions.metadata IS 'Additional metadata for the payment transaction'; 